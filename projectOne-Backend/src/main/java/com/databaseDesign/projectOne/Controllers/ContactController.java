package com.databaseDesign.projectOne.Controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.web.bind.annotation.PathVariable;

import com.databaseDesign.projectOne.Services.ContactService;
import com.databaseDesign.projectOne.Entities.Contact;


@Controller // This means that this class is a Controller
@RequestMapping(path="/app") // This means URL's start with /demo (after Application path)
public class ContactController {
  @Autowired // This means to get the bean called contactRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private ContactService contactService;

  @GetMapping(path="/contacts")
  public @ResponseBody Iterable<Contact> getAllContacts() {
    // This returns a JSON or XML with the users
    return contactService.getAllContacts();
  }

  @GetMapping(value="/contact/{id}")
  public @ResponseBody Contact putMethodName(@PathVariable("id") Integer id) {
      // This returns the JSON with contact matching the given id
      Contact contact = contactService.getContactById(id);
      if (contact == null) throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Contact not found");
      return contact;
  }

  @GetMapping(value="/contacts/search")
  public @ResponseBody Iterable<Contact> getContactsBySearch(@RequestParam("search") String searchString) {
    System.out.println("Search string: " + searchString);
    return contactService.getContactBySearch(searchString);
  }

  @PostMapping(path="/contact/add") // Map ONLY POST Requests
  public @ResponseBody Contact addNewContact (@RequestParam String fname
      , @RequestParam String mname
      , @RequestParam String lname) {
    // @ResponseBody means the returned String is the response, not a view namHttpStatus.NOT_FOUND, "Contact not found"
    // @RequestParam means it is a parameter from the GET or POST request

    Contact newContact = new Contact(fname, mname, lname);
    return contactService.createContact(newContact);
  }

  @PutMapping(path="/contact/{id}")
  public @ResponseBody Contact modifyContact (@PathVariable("id") Integer id
      , @RequestParam String fname
      , @RequestParam String mname
      , @RequestParam String lname) {
      Contact modifiedContact = new Contact(fname, mname, lname);
      modifiedContact.setContactId(id);
      modifiedContact = contactService.modifyContact(modifiedContact);
      if (modifiedContact == null) throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Contact not found");
      return modifiedContact;
  }

  @DeleteMapping(path="/contact/{id}") // Map ONLY DELETE Requests
  public @ResponseBody String deleteContact(@PathVariable("id") Integer id) {
    return contactService.deleteContact(id);
  }

}